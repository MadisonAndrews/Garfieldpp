#include <iostream>
#include <iomanip>
#include <cmath>

#include "OpticalData.hh"
#include "FundamentalConstants.hh"

namespace Garfield {

OpticalData::OpticalData() :
  debug(false) {
  
}

OpticalData::~OpticalData() {

}

bool
OpticalData::IsAvailable(const std::string material) const {

  if (material == "Ne") return true;
  if (material == "Ar") return true;
 
  if (material == "CO2") return true;
  
  if (material == "CH4") return true;
  
  return false;
  
}  

bool
OpticalData::GetPhotoabsorptionCrossSection(const std::string material,
                                            const double e, 
                                            double& cs, double& eta) {

  if (material == "Ne") return PhotoAbsorptionCsNeon(e, cs, eta);
  if (material == "Ar") return PhotoAbsorptionCsArgon(e, cs, eta);

  if (material == "CO2") return PhotoAbsorptionCsCO2(e, cs, eta);
  
  if (material == "CH4") return PhotoAbsorptionCsMethane(e, cs, eta);
 
  return false;

}

bool
OpticalData::PhotoAbsorptionCsNeon(const double e, 
                                   double& cs, double& eta) {

  // Sources:
  // J. Berkowitz, Atomic and Molecular Photoabsorption (2002)
  // N. Sakamoto et al., NIFS-DATA 109
  
  const double ip12 = 21.6613;

  if (e < ip12) {
    cs = eta = 0.;
    return true;
  }

  double a, b, c, d;
  if (e < 48.475) {
    a =  16.13668;
    b = -38.9941;
    c =  35.96058;
    d = -12.319;
  } else if (e < 250.0) {
    a =    5.806197;
    b =   73.98605;
    c = -328.517;
    d =  353.6014;
  } else if (e < 280.0) {
    a =   -2071.35;
    b =   76715.55;
    c = -942469.;
    d = 3857740.;
  } else if (e < 870.25) {
    a =    0.766927;
    b =  170.951;
    c = -971.918;
    d = 2191.973;
  } else if (e < 2984.3) {
    a =      3.401404;
    b =   4655.156;
    c = -92346.7;
    d = 683347.;
  } else {
    a =      -2.13904;
    b =    5956.894;
    c = -185028.;
    d = 2306776.;
  }

  const double y = ip12 / e;
  const double f = a * pow(y, 2) + b * pow(y, 3) + 
                   c * pow(y, 4) + d * pow(y, 5);
  // Conversion from oscillator strength to photoabsorption cs
  cs = 8.067283e-18 * f;
  eta = 1.;
  return true;

}

bool
OpticalData::PhotoAbsorptionCsArgon(const double e, 
                                    double& cs, double& eta) {

  // Sources:
  // J. Berkowitz, Atomic and Molecular Photoabsorption (2002)
  // N. Sakamoto et al., NIFS-DATA 109
  
  const double ip32 = 15.7596103;
  const double ip12 = 15.9371039;
  
  if (e < ip32) {
    cs = eta = 0.;
    return true;
  } else if (e < ip12) {
    // Continuum contribution between IP 3/2 and IP 1/2
    cs = 20.75e-18;
    eta = 1.;
    return true;
  }
  
  if (e >= 243. && e <= 336.) {
    // L23 edge
    const int nEntries = 130;
    const double xAr[nEntries] = {
      2.4300e02, 2.4400e02, 2.4450e02, 2.4500e02, 2.4550e02, 
      2.4600e02, 2.4650e02, 2.4700e02, 2.4750e02, 2.4800e02,
      2.4850e02, 2.4900e02, 2.4950e02, 2.5000e02, 2.5050e02,
      2.5100e02, 2.5150e02, 2.5200e02, 2.5250e02, 2.5300e02,
      2.5350e02, 2.5400e02, 2.5450e02, 2.5500e02, 2.5550e02,
      2.5600e02, 2.5650e02, 2.5700e02, 2.5750e02, 2.5800e02,
      2.5850e02, 2.5900e02, 2.5950e02, 2.6000e02, 2.6050e02,
      2.6100e02, 2.6150e02, 2.6200e02, 2.6250e02, 2.6300e02,
      2.6350e02, 2.6400e02, 2.6450e02, 2.6500e02, 2.6550e02,
      2.6600e02, 2.6650e02, 2.6700e02, 2.6750e02, 2.6800e02,
      2.6850e02, 2.6900e02, 2.6950e02, 2.7000e02, 2.7050e02,
      2.7100e02, 2.7150e02, 2.7200e02, 2.7250e02, 2.7300e02,
      2.7350e02, 2.7400e02, 2.7450e02, 2.7500e02, 2.7550e02,
      2.7600e02, 2.7650e02, 2.7700e02, 2.7750e02, 2.7800e02,
      2.7850e02, 2.7900e02, 2.7950e02, 2.8000e02, 2.8100e02,
      2.8200e02, 2.8300e02, 2.8400e02, 2.8500e02, 2.8600e02,
      2.8700e02, 2.8800e02, 2.8900e02, 2.9000e02, 2.9100e02,
      2.9200e02, 2.9300e02, 2.9400e02, 2.9500e02, 2.9600e02,
      2.9700e02, 2.9800e02, 2.9900e02, 3.0000e02, 3.0100e02,
      3.0200e02, 3.0300e02, 3.0400e02, 3.0500e02, 3.0600e02,
      3.0700e02, 3.0800e02, 3.0900e02, 3.1000e02, 3.1100e02,
      3.1200e02, 3.1300e02, 3.1400e02, 3.1500e02, 3.1600e02,
      3.1700e02, 3.1800e02, 3.1900e02, 3.2000e02, 3.2100e02,
      3.2200e02, 3.2300e02, 3.2400e02, 3.2500e02, 3.2600e02,
      3.2700e02, 3.2800e02, 3.2900e02, 3.3000e02, 3.3100e02,
      3.3200e02, 3.3300e02, 3.3400e02, 3.3500e02, 3.3600e02};
    
    const double yAr[nEntries] = {
      4.1053e-01, 5.7040e-01, 8.3784e-01, 7.6382e-01, 5.8520e-01,
      6.0099e-01, 1.0352,     1.5938,     1.8138,     1.9737,
      2.2698,     2.6546,     3.0888,     3.3750,     3.5428,
      3.7204,     3.8092,     3.8882,     3.8882,     3.9178,
      4.3657,     4.3323,     4.3212,     4.2324,     4.1990,
      4.1768,     4.0991,     4.0546,     4.0324,     3.9769,
      3.9658,     3.9435,     3.8658,     3.8769,     3.8102,
      3.7769,     3.8213,     3.7658,     3.7547,     3.7325,
      3.7214,     2.7106,     2.6945,     2.7106,     2.6945,
      2.6945,     2.7026,     2.7026,     2.7106,     2.6945,
      2.6864,     2.6380,     2.5977,     2.5735,     2.5332,
      3.3806,     3.3697,     3.3697,     3.3367,     3.3258,
      3.3148,     3.3148,     3.3038,     3.2819,     3.2489,
      3.2599,     3.2489,     3.2489,     3.1940,     3.2050,
      3.1940,     3.1831,     3.2050,     3.1721,     3.1611,
      3.1501,     3.1282,     3.1501,     3.1172,     3.1282,
      3.1062,     3.1062,     3.1062,     3.0843,     3.0623,
      3.0623,     3.0404,     3.0294,     3.0075,     3.0294,
      3.0184,     3.0075,     2.9745,     2.9745,     2.9965,
      2.9635,     2.9306,     2.9306,     2.9306,     2.9196, 
      2.9306,     2.8977,     2.8757,     2.8867,     2.8867,
      2.8757,     2.8757,     2.8867,     2.8428,     2.8209,
      2.8428,     2.8428,     2.8209,     2.8428,     2.8428,
      2.8538,     2.9196,     2.9635,     3.0075,     3.0075,
      2.9635,     3.0075,     2.9526,     2.9526,     2.9087,
      2.8648,     2.8977,     2.8757,     2.8648,     2.8318};
    
    int iLow = 0;
    int iUp = nEntries - 1;
    int iM;
    while (iUp - iLow > 1) {
      iM = (iUp + iLow) >> 1;
      if (e >= xAr[iM]) {
        iLow = iM;
      } else {
        iUp = iM;
      }
    }

    // Linear interpolation.
    cs = yAr[iLow] + (e - xAr[iLow]) * 
         (yAr[iUp] - yAr[iLow]) / (xAr[iUp] - xAr[iLow]);
    // Convert from Mbarn to cm2.
    cs *= 1.e-18;
    eta = 1.;
    return true;
  }
  
  double a, b, c, d;
  if (e < 29.2395) {
    a =  -25.4281;
    b =  170.7881;
    c = -247.886;
    d =  106.5586;
  } else if (e < 48.) {
    a =   76.97689;
    b = -573.622;
    c = 1358.922;
    d = -976.888;
  } else if (e < 79.3) {
    a =   14.43074;
    b =  -40.8325;
    c = -115.985;
    d =  347.5945;
  } else if (e < 243.) {
    a =     5.617571;
    b =   128.2189;
    c = -1203.47;
    d =  2660.151;
  } else if (e < 500.) {
    a =      -11.8768;
    b =     8371.694;
    c =  -109963.;
    d =        0.;
  } else if (e < 929.7) {
    a =       35.65584;
    b =     4922.702;
    c =     8315.576;
    d = -1757750.;
  } else if (e < 3206.) {
    a =       20.59692;
    b =     6151.107;
    c =    -2513.47;
    d = -2337467.;
  } else if (e < 6199.3) {
    a =       -1004.53;
    b =      954912.7;
    c =  -220652027.;
    d = 17883565552.;
  } else {
    a =         12.26308;
    b =     132886.9;
    c =   -5911229.;
    d = -624237063.;
  }
  
  const double y = ip12 / e;
  const double f = a * pow(y, 2) + b * pow(y, 3) + 
                   c * pow(y, 4) + d * pow(y, 5);
  // Conversion from oscillator strength to photoabsorption cs
  cs = 8.067283e-18 * f;
  eta = 1.;
  return true;
  
}

bool
OpticalData::PhotoAbsorptionCsCO2(const double e, double& cs, double& eta) {

  // Sources:
  // Photoabsorption cross-section:
  // J. Berkowitz, Atomic and Molecular Photoabsorption (2002)
  // N. Sakamoto et al., NIFS-DATA 109
  // Photoionization yield:
  // Nakata et al., Science of Light 14 (1965), 14
  // Barrus et al., Phys. Rev. A 20 (1979), 1045
  // Ukai et al., J. Chem. Phys. 97 (1992), 2835
  
  if (e < 7.) {
    cs = eta = 0.;
    return true;
  }
  
  const double ip = 13.7763;
  
  if (e < 107.) {
    
    // Photoabsorption cross-section
    const int nPacsEntries = 1072;
    
    const double xCO2[nPacsEntries] = {
      7.0000,    7.3120,    7.5360,    7.7130,    7.8620,
      8.0170,    8.1810,    8.3290,    8.5750,    8.7380,    
      8.8800,    9.0360,    9.2060,    9.3480,    9.4850,
      9.5720,    9.6760,    9.8120,    9.9500,    1.0080e1,  
      1.0170e1,  1.0330e1,  1.0660e1,  1.0715e1,  1.0727e1,  
      1.0794e1,  1.0842e1,  1.0875e1,  1.0923e1,  1.0978e1,  
      1.0990e1,  1.1045e1,  1.1071e1,  1.1112e1,  1.1133e1,  
      1.1167e1,  1.1193e1,  1.1241e1,  1.1262e1,  1.1322e1,  
      1.1336e1,  1.1377e1,  1.1403e1,  1.1418e1,  1.1470e1,  
      1.1492e1,  1.1525e1,  1.1544e1,  1.1585e1,  1.1621e1,  
      1.1666e1,  1.1714e1,  1.1735e1,  1.1769e1,  1.1817e1,  
      1.1843e1,  1.1876e1,  1.1917e1,  1.1924e1,  1.1965e1,  
      1.2017e1,  1.2053e1,  1.2087e1,  1.2139e1,  1.2180e1,
      1.2221e1,  1.2254e1,  1.2295e1,  1.2357e1,  1.2405e1,  
      1.2438e1,  1.2471e1,  1.2526e1,  1.2565e1,  1.2601e1,  
      1.2634e1,  1.2675e1,  1.2701e1,  1.2742e1,  1.2801e1,  
      1.2823e1,  1.2842e1,  1.2918e1,  1.2937e1,  1.2971e1,  
      1.3033e1,  1.3093e1,  1.3160e1,  1.3167e1,  1.3196e1, 
      1.3229e1,  1.3262e1,  1.3296e1,  1.3344e1,  1.3411e1,  
      1.3432e1,  1.3458e1,  1.3485e1,  1.3518e1,  1.3559e1,
        
      1.3592e1,  1.3621e1,  1.3647e1,  1.3681e1,  1.3729e1,  
      1.3755e1,  1.3776e1,  1.3780e1,  1.3783e1,  1.3786e1,  
      1.3790e1,  1.3794e1,  1.3796e1,  1.3799e1,  1.3803e1,  
      1.3806e1,  1.3814e1,  1.3818e1,  1.3821e1,  1.3825e1,  
      1.3827e1,  1.3831e1,  1.3835e1,  1.3839e1,  1.3843e1,  
      1.3846e1,  1.3849e1,  1.3853e1,  1.3857e1,  1.3863e1,  
      1.3868e1,  1.3872e1,  1.3874e1,  1.3878e1,  1.3881e1,  
      1.3884e1,  1.3887e1,  1.3891e1,  1.3894e1,  1.3902e1,  
      1.3908e1,  1.3914e1,  1.3916e1,  1.3921e1,  1.3925e1,  
      1.3933e1,  1.3937e1,  1.3938e1,  1.3942e1,  1.3947e1,  
      1.3950e1,  1.3953e1,  1.3959e1,  1.3962e1,  1.3965e1,  
      1.3972e1,  1.3982e1,  1.3984e1,  1.3988e1,  1.3995e1,  
      1.3999e1,  1.4002e1,  1.4008e1,  1.4012e1,  1.4014e1,  
      1.4019e1,  1.4026e1,  1.4030e1,  1.4035e1,  1.4038e1,  
      1.4041e1,  1.4047e1,  1.4050e1,  1.4059e1,  1.4065e1,  
      1.4072e1,  1.4077e1,  1.4083e1,  1.4087e1,  1.4093e1,  
      1.4104e1,  1.4112e1,  1.4130e1,  1.4137e1,  1.4142e1,  
      1.4153e1,  1.4189e1,  1.4194e1,  1.4200e1,  1.4206e1,  
      1.4215e1,  1.4223e1,  1.4246e1,  1.4254e1,  1.4290e1,  
      1.4296e1,  1.4308e1,  1.4318e1,  1.4349e1,  1.4356e1,
        
      1.4403e1,  1.4456e1,  1.4465e1,  1.4504e1,  1.4513e1,  
      1.4542e1,  1.4611e1,  1.4663e1,  1.4671e1,  1.4680e1,  
      1.4710e1,  1.4752e1,  1.4805e1,  1.4836e1,  1.4847e1,  
      1.4862e1,  1.4878e1,  1.4898e1,  1.4921e1,  1.4938e1, 
      1.4943e1,  1.4961e1,  1.4977e1,  1.4985e1,  1.5007e1,  
      1.5023e1,  1.5043e1,  1.5062e1,  1.5081e1,  1.5086e1,  
      1.5097e1,  1.5106e1,  1.5114e1,  1.5124e1,  1.5134e1,  
      1.5139e1,  1.5144e1,  1.5159e1,  1.5178e1,  1.5187e1,  
      1.5194e1,  1.5208e1,  1.5225e1,  1.5239e1,  1.5252e1, 
      1.5256e1,  1.5268e1,  1.5282e1,  1.5289e1,  1.5323e1,  
      1.5328e1,  1.5342e1,  1.5348e1,  1.5363e1,  1.5366e1,  
      1.5371e1,  1.5384e1,  1.5394e1,  1.5401e1,  1.5413e1,  
      1.5425e1,  1.5437e1,  1.5448e1,  1.5463e1,  1.5480e1,  
      1.5486e1,  1.5495e1,  1.5511e1,  1.5529e1,  1.5542e1,  
      1.5545e1,  1.5550e1,  1.5563e1,  1.5567e1,  1.5581e1,  
      1.5584e1,  1.5590e1,  1.5604e1,  1.5612e1,  1.5615e1,  
      1.5633e1,  1.5640e1,  1.5655e1,  1.5668e1,  1.5680e1,  
      1.5685e1,  1.5707e1,  1.5712e1,  1.5716e1,  1.5723e1,  
      1.5725e1,  1.5731e1,  1.5735e1,  1.5738e1,  1.5744e1,  
      1.5749e1,  1.5753e1,  1.5763e1,  1.5774e1,  1.5784e1,
        
      1.5790e1,  1.5795e1,  1.5806e1,  1.5812e1,  1.5820e1,  
      1.5843e1,  1.5853e1,  1.5863e1,  1.5871e1,  1.5878e1,  
      1.5886e1,  1.5894e1,  1.5897e1,  1.5905e1,  1.5908e1,  
      1.5914e1,  1.5921e1,  1.5924e1,  1.5932e1,  1.5937e1,  
      1.5944e1,  1.5946e1,  1.5951e1,  1.5956e1,  1.5962e1,  
      1.5976e1,  1.5985e1,  1.5992e1,  1.5997e1,  1.6004e1,  
      1.6010e1,  1.6014e1,  1.6021e1,  1.6029e1,  1.6033e1,  
      1.6036e1,  1.6042e1,  1.6047e1,  1.6054e1,  1.6063e1,  
      1.6070e1,  1.6077e1,  1.6078e1,  1.6087e1,  1.6091e1,  
      1.6096e1,  1.6101e1,  1.6109e1,  1.6114e1,  1.6120e1,  
      1.6122e1,  1.6127e1,  1.6131e1,  1.6139e1,  1.6148e1,  
      1.6156e1,  1.6164e1,  1.6173e1,  1.6182e1,  1.6190e1,  
      1.6200e1,  1.6214e1,  1.6222e1,  1.6228e1,  1.6235e1,  
      1.6240e1,  1.6243e1,  1.6249e1,  1.6257e1,  1.6272e1,  
      1.6284e1,  1.6291e1,  1.6293e1,  1.6297e1,  1.6305e1,  
      1.6311e1,  1.6315e1,  1.6324e1,  1.6331e1,  1.6337e1,  
      1.6342e1,  1.6349e1,  1.6355e1,  1.6360e1,  1.6371e1,  
      1.6386e1,  1.6395e1,  1.6413e1,  1.6430e1,  1.6434e1,  
      1.6437e1,  1.6441e1,  1.6444e1,  1.6447e1,  1.6451e1,  
      1.6456e1,  1.6461e1,  1.6465e1,  1.6469e1,  1.6474e1,
        
      1.6479e1,  1.6483e1,  1.6487e1,  1.6491e1,  1.6493e1,  
      1.6498e1,  1.6501e1,  1.6506e1,  1.6523e1,  1.6535e1,  
      1.6547e1,  1.6556e1,  1.6563e1,  1.6569e1,  1.6575e1,  
      1.6581e1,  1.6586e1,  1.6591e1,  1.6598e1,  1.6609e1,  
      1.6619e1,  1.6624e1,  1.6627e1,  1.6631e1,  1.6639e1, 
      1.6646e1,  1.6664e1,  1.6669e1,  1.6681e1,  1.6692e1,  
      1.6696e1,  1.6701e1,  1.6708e1,  1.6713e1,  1.6719e1,  
      1.6723e1,  1.6725e1,  1.6728e1,  1.6734e1,  1.6739e1,  
      1.6745e1,  1.6750e1,  1.6753e1,  1.6757e1,  1.6760e1,  
      1.6768e1,  1.6787e1,  1.6798e1,  1.6801e1,  1.6820e1,  
      1.6824e1,  1.6827e1,  1.6833e1,  1.6836e1,  1.6841e1,  
      1.6848e1,  1.6856e1,  1.6862e1,  1.6864e1,  1.6870e1,  
      1.6878e1,  1.6881e1,  1.6885e1,  1.6889e1,  1.6892e1,  
      1.6897e1,  1.6899e1,  1.6902e1,  1.6905e1,  1.6909e1,  
      1.6913e1,  1.6916e1,  1.6922e1,  1.6933e1,  1.6936e1,  
      1.6944e1,  1.6952e1,  1.6964e1,  1.6969e1,  1.6976e1,  
      1.6981e1,  1.6986e1,  1.6989e1,  1.6993e1,  1.6996e1,  
      1.6998e1,  1.7003e1,  1.7009e1,  1.7021e1,  1.7024e1,  
      1.7028e1,  1.7031e1,  1.7035e1,  1.7038e1,  1.7041e1,
      1.7044e1,  1.7050e1,  1.7054e1,  1.7056e1,  1.7059e1,
        
      1.7063e1,  1.7066e1,  1.7071e1,  1.7073e1,  1.7076e1,  
      1.7079e1,  1.7083e1,  1.7103e1,  1.7108e1,  1.7112e1,  
      1.7118e1,  1.7124e1,  1.7133e1,  1.7143e1,  1.7152e1,  
      1.7156e1,  1.7161e1,  1.7165e1,  1.7170e1,  1.7175e1,  
      1.7177e1,  1.7180e1,  1.7184e1,  1.7188e1,  1.7192e1,  
      1.7198e1,  1.7201e1,  1.7206e1,  1.7211e1,  1.7214e1,  
      1.7225e1,  1.7226e1,  1.7240e1,  1.7242e1,  1.7244e1,  
      1.7245e1,  1.7248e1,  1.7251e1,  1.7257e1,  1.7259e1,  
      1.7262e1,  1.7264e1,  1.7270e1,  1.7275e1,  1.7281e1,  
      1.7284e1,  1.7292e1,  1.7298e1,  1.7302e1,  1.7307e1,  
      1.7311e1,  1.7317e1,  1.7320e1,  1.7323e1,  1.7327e1,  
      1.7330e1,  1.7334e1,  1.7341e1,  1.7347e1,  1.7350e1,  
      1.7355e1,  1.7357e1,  1.7360e1,  1.7362e1,  1.7366e1,  
      1.7371e1,  1.7376e1,  1.7383e1,  1.7387e1,  1.7390e1,  
      1.7391e1,  1.7393e1,  1.7397e1,  1.7402e1,  1.7406e1,  
      1.7414e1,  1.7420e1,  1.7424e1,  1.7427e1,  1.7430e1,  
      1.7433e1,  1.7439e1,  1.7443e1,  1.7445e1,  1.7449e1,  
      1.7455e1,  1.7459e1,  1.7463e1,  1.7469e1,  1.7475e1,  
      1.7482e1,  1.7485e1,  1.7492e1,  1.7494e1,  1.7497e1,  
      1.7503e1,  1.7508e1,  1.7512e1,  1.7515e1,  1.7518e1,
        
      1.7524e1,  1.7527e1,  1.7531e1,  1.7535e1,  1.7538e1, 
      1.7540e1,  1.7543e1,  1.7548e1,  1.7552e1,  1.7555e1,  
      1.7556e1,  1.7559e1,  1.7566e1,  1.7571e1,  1.7576e1,  
      1.7582e1,  1.7586e1,  1.7591e1,  1.7593e1,  1.7599e1,  
      1.7605e1,  1.7610e1,  1.7615e1,  1.7617e1,  1.7627e1,  
      1.7631e1,  1.7633e1,  1.7638e1,  1.7643e1,  1.7648e1,  
      1.7655e1,  1.7664e1,  1.7671e1,  1.7674e1,  1.7678e1,  
      1.7686e1,  1.7694e1,  1.7697e1,  1.7701e1,  1.7707e1,  
      1.7712e1,  1.7713e1,  1.7716e1,  1.7721e1,  1.7727e1,  
      1.7731e1,  1.7733e1,  1.7736e1,  1.7740e1,  1.7745e1,  
      1.7754e1,  1.7763e1,  1.7768e1,  1.7772e1,  1.7774e1,  
      1.7778e1,  1.7781e1,  1.7784e1,  1.7789e1,  1.7792e1,  
      1.7795e1,  1.7798e1,  1.7802e1,  1.7808e1,  1.7813e1,  
      1.7817e1,  1.7820e1,  1.7828e1,  1.7832e1,  1.7838e1,  
      1.7842e1,  1.7846e1,  1.7847e1,  1.7851e1,  1.7853e1,  
      1.7856e1,  1.7858e1,  1.7861e1,  1.7864e1,  1.7867e1,  
      1.7871e1,  1.7874e1,  1.7875e1,  1.7881e1,  1.7888e1,  
      1.7892e1,  1.7895e1,  1.7897e1,  1.7901e1,  1.7906e1,  
      1.7908e1,  1.7911e1,  1.7914e1,  1.7919e1,  1.7926e1,  
      1.7931e1,  1.7935e1,  1.7940e1,  1.7942e1,  1.7945e1,
        
      1.7948e1,  1.7950e1,  1.7956e1,  1.7959e1,  1.7962e1,  
      1.7965e1,  1.7968e1,  1.7972e1,  1.7978e1,  1.7981e1,  
      1.7983e1,  1.7986e1,  1.7989e1,  1.7994e1,  1.7996e1,  
      1.7998e1,  1.8002e1,  1.8006e1,  1.8010e1,  1.8012e1,  
      1.8014e1,  1.8022e1,  1.8025e1,  1.8028e1,  1.8034e1,  
      1.8044e1,  1.8047e1,  1.8057e1,  1.8062e1,  1.8068e1,  
      1.8072e1,  1.8078e1,  1.8082e1,  1.8091e1,  1.8096e1,  
      1.8101e1,  1.8106e1,  1.8119e1,  1.8125e1,  1.8129e1,  
      1.8138e1,  1.8146e1,  1.8150e1,  1.8152e1,  1.8156e1,  
      1.8164e1,  1.8168e1,  1.8172e1,  1.8179e1,  1.8186e1,  
      1.8199e1,  1.8220e1,  1.8239e1,  1.8241e1,  1.8245e1,  
      1.8253e1,  1.8260e1,  1.8274e1,  1.8277e1,  1.8288e1,  
      1.8293e1,  1.8294e1,  1.8299e1,  1.8307e1,  1.8311e1,  
      1.8324e1,  1.8332e1,  1.8339e1,  1.8342e1,  1.8353e1,  
      1.8363e1,  1.8370e1,  1.8379e1,  1.8393e1,  1.8412e1,  
      1.8419e1,  1.8422e1,  1.8432e1,  1.8439e1,  1.8444e1,  
      1.8451e1,  1.8458e1,  1.8459e1,  1.8465e1,  1.8469e1, 
      1.8476e1,  1.8489e1,  1.8498e1,  1.8503e1,  1.8513e1,  
      1.8518e1,  1.8524e1,  1.8526e1,  1.8530e1,  1.8534e1,  
      1.8545e1,  1.8551e1,  1.8558e1,  1.8588e1,  1.8624e1,
        
      1.8629e1,  1.8633e1,  1.8644e1,  1.8649e1,  1.8661e1,  
      1.8674e1,  1.8686e1,  1.8697e1,  1.8705e1,  1.8718e1,  
      1.8730e1,  1.8740e1,  1.8751e1,  1.8764e1,  1.8771e1, 
      1.8796e1,  1.8799e1,  1.8806e1,  1.8809e1,  1.8820e1,  
      1.8823e1,  1.8831e1,  1.8840e1,  1.8851e1,  1.8855e1,  
      1.8858e1,  1.8867e1,  1.8875e1,  1.8890e1,  1.8903e1,  
      1.8908e1,  1.8919e1,  1.8929e1,  1.8936e1,  1.8941e1,  
      1.8949e1,  1.8956e1,  1.8963e1,  1.8969e1,  1.8980e1,  
      1.8982e1,  1.8996e1,  1.9006e1,  1.9011e1,  1.9018e1,  
      1.9024e1,  1.9025e1,  1.9034e1,  1.9040e1,  1.9047e1,  
      1.9056e1,  1.9068e1,  1.9073e1,  1.9078e1,  1.9082e1,  
      1.9090e1,  1.9097e1,  1.9104e1,  1.9115e1,  1.9121e1,  
      1.9130e1,  1.9135e1,  1.9144e1,  1.9155e1,  1.9160e1,  
      1.9168e1,  1.9173e1,  1.9176e1,  1.9180e1,  1.9192e1,  
      1.9198e1,  1.9211e1,  1.9218e1,  1.9224e1,  1.9230e1,  
      1.9235e1,  1.9237e1,  1.9242e1,  1.9250e1,  1.9259e1,  
      1.9261e1,  1.9263e1,  1.9267e1,  1.9280e1,  1.9285e1,  
      1.9294e1,  1.9303e1,  1.9308e1,  1.9315e1,  1.9322e1,  
      1.9328e1,  1.9339e1,  1.9344e1,  1.9350e1,  1.9357e1,  
      1.9365e1,  1.9370e1,  1.9376e1,  1.9387e1,  1.9394e1,
        
      1.9398e1,  1.9403e1,  1.9410e1,  1.9418e1,  1.9427e1,  
      1.9431e1,  1.9441e1,  1.9447e1,  1.9459e1,  1.9472e1,  
      1.9486e1,  1.9496e1,  1.9510e1,  1.9523e1,  1.9528e1,  
      1.9539e1,  1.9550e1,  1.9551e1,  1.9556e1,  1.9574e1,  
      1.9579e1,  1.9586e1,  1.9589e1,  1.9594e1,  1.9599e1,  
      1.9600e1,  1.9612e1,  1.9621e1,  1.9634e1,  1.9636e1,  
      1.9642e1,  1.9651e1,  1.9659e1,  1.9665e1,  1.9670e1,  
      1.9673e1,  1.9679e1,  1.9684e1,  1.9703e1,  1.9712e1,  
      1.9718e1,  1.9736e1,  1.9748e1,  1.9771e1,  1.9785e1,  
      1.9790e1,  1.9798e1,  1.9806e1,  1.9815e1,  1.9838e1,  
      1.9863e1,  1.9950e1,  1.9980e1,  1.9996e1,  2.0005e1, 
      2.0029e1,  2.0379e1,  2.0696e1,  2.0897e1,  2.1041e1,  
      2.1196e1,  2.1455e1,  2.1641e1,  2.2001e1,  2.2248e1, 
      2.2537e1,  2.2851e1,  2.3122e1,  2.3521e1,  2.3767e1,  
      2.3964e1,  2.4344e1,  2.4724e1,  2.4997e1,  2.5406e1,  
      2.5708e1,  2.5934e1,  2.6105e1,  2.6530e1,  2.6962e1,  
      2.7216e1,  2.7515e1,  2.7862e1,  2.8167e1,  2.8394e1,  
      2.8659e1,  2.8807e1,  2.9010e1,  2.9207e1,  2.9644e1,  
      2.9876e1,  3.0161e1,  3.0601e1,  3.1011e1,  3.1328e1,  
      3.1745e1,  3.1979e1,  3.2331e1,  3.2677e1,  3.3097e1,
        
      3.3598e1,  3.3850e1,  3.4046e1,  3.4328e1,  3.4934e1,  
      3.5155e1,  3.5376e1,  3.5546e1,  3.5643e1,  3.5930e1,  
      3.6160e1,  3.6670e1,  3.7190e1,  3.7700e1,  3.8210e1,  
      3.8720e1,  3.9230e1,  3.9740e1,  4.0030e1,  4.1070e1,  
      4.2100e1,  4.3130e1,  4.4170e1,  4.5200e1,  4.6230e1,  
      4.7270e1,  4.8300e1,  4.9330e1,  5.0370e1,  5.1400e1,  
      5.2430e1,  5.3470e1,  5.4500e1,  5.5530e1,  5.6570e1,  
      5.7600e1,  5.8630e1,  5.9670e1,  6.0700e1,  6.1730e1,  
      6.2770e1,  6.3800e1,  6.4830e1,  6.5870e1,  6.6900e1,  
      6.7930e1,  6.8970e1,  7.0000e1,  7.1030e1,  7.2070e1,  
      7.3100e1,  7.4130e1,  7.5170e1,  7.6200e1,  7.7230e1,  
      7.8270e1,  7.9300e1,  8.0050e1,  8.2100e1,  8.4150e1,  
      8.6200e1,  8.8250e1,  9.0300e1,  9.2340e1,  9.4390e1,  
      9.6440e1,  9.8490e1,  1.0054e2,  1.0259e2,  1.0464e2,
      1.0669e2,  1.0708e2};
       
    const double yCO2[nPacsEntries] = {
      6.7469e-3, 3.4926e-2, 8.8547e-2, 1.7432e-1, 2.7115e-1,
      3.6920e-1, 4.5146e-1, 4.9826e-1, 5.0214e-1, 5.1128e-1,
      5.5255e-1, 6.2484e-1, 7.1291e-1, 7.4200e-1, 7.0101e-1,
      6.4783e-1, 5.5338e-1, 4.1268e-1, 2.7063e-1, 1.7081e-1,
      1.0541e-1, 4.8968e-2, 1.6916,    3.2380,    2.6515,    
      5.7460,    1.4952e1,  1.5913e1,  3.6168e1,  8.2791e1,
      7.9483e1,  1.1133e2,  6.7176e1,  3.8379e1,  3.4611e1,  
      1.8162e1,  1.5189e1,  1.2592e1,  1.0080e1,  2.1587e1,  
      3.4728e1,  8.6792e1,  3.1293e1,  2.4304e1,  1.5763e1,  
      2.0032e1,  2.8903e1,  2.2374e1,  2.3460e1,  1.6469e1,  
      2.5926e1,  1.8600e1,  1.9771e1,  1.8012e1,  2.8306e1,  
      1.8217e1,  1.7295e1,  1.9177e1,  2.1898e1,  4.2363e1,  
      2.1434e1,  2.4488e1,  2.7583e1,  5.4703e1,  3.0300e1,
      2.8875e1,  3.3018e1,  5.3733e1,  3.8119e1,  4.0838e1,  
      4.9458e1,  7.2686e1,  4.5436e1,  3.5139e1,  4.5308e1,  
      6.1881e1,  4.0451e1,  3.8106e1,  3.0863e1,  3.7724e1,  
      3.5130e1,  3.7262e1,  5.8689e1,  5.5256e1,  5.5589e1,  
      7.1575e1,  5.0729e1,  5.8303e1,  6.2948e1,  6.4704e1,  
      7.1442e1,  6.5162e1,  7.2275e1,  6.7545e1,  7.1308e1,  
      7.0722e1,  7.6162e1,  7.1933e1,  7.5574e1,  7.6409e1,
        
      7.3687e1,  7.9252e1,  8.2683e1,  8.1635e1,  8.9543e1,  
      8.8497e1,  9.0588e1,  8.5500e1,  8.8018e1,  8.7001e1,  
      9.2849e1,  8.6631e1,  8.9718e1,  8.5005e1,  7.4685e1,  
      8.4108e1,  7.7564e1,  8.0772e1,  8.7758e1,  7.8697e1,  
      8.0320e1,  7.5687e1,  7.6945e1,  7.4221e1,  8.0395e1,  
      8.0962e1,  8.2951e1,  7.8318e1,  8.0754e1,  7.0513e1,  
      7.9367e1,  8.2331e1,  8.0502e1,  7.4285e1,  7.2333e1,  
      6.7173e1,  6.6359e1,  6.7292e1,  6.9362e1,  6.2128e1,  
      7.4962e1,  6.6713e1,  6.5087e1,  6.7725e1,  6.3011e1,  
      6.1871e1,  6.3250e1,  6.5768e1,  6.2801e1,  6.0930e1,  
      6.1295e1,  5.9465e1,  6.0600e1,  5.8852e1,  5.9460e1,  
      5.5069e1,  5.6690e1,  5.5877e1,  5.5874e1,  5.3678e1,  
      5.1604e1,  5.2659e1,  5.2535e1,  5.0909e1,  5.1963e1,  
      5.2408e1,  4.9765e1,  5.0210e1,  4.9191e1,  4.5738e1,  
      4.9757e1,  4.7683e1,  4.7804e1,  4.4592e1,  4.6050e1,  
      4.2839e1,  4.2268e1,  4.0194e1,  4.1248e1,  4.1935e1,  
      3.9290e1,  3.9734e1,  3.6963e1,  3.6717e1,  3.7203e1,  
      3.4557e1,  3.1535e1,  3.1777e1,  3.0596e1,  3.1082e1,  
      3.0021e1,  3.0018e1,  2.7043e1,  2.7161e1,  2.4708e1,  
      2.4828e1,  2.3888e1,  2.3884e1,  2.1800e1,  2.2040e1,
        
      1.9949e1,  1.8220e1,  1.8420e1,  1.7064e1,  1.7263e1,  
      1.6357e1,  1.5395e1,  1.4440e1,  1.4111e1,  1.4433e1, 
      1.3853e1,  1.3388e1,  1.2921e1,  1.2665e1,  1.3351e1,  
      1.2899e1,  1.2893e1,  1.3575e1,  1.2266e1,  1.2260e1,  
      1.2223e1,  1.2605e1,  1.5201e1,  1.5500e1,  1.3243e1,  
      1.2894e1,  1.5167e1,  1.3234e1,  1.4773e1,  1.5498e1,  
      1.5474e1,  1.7243e1,  1.7439e1,  1.6051e1,  1.5187e1,  
      1.4232e1,  1.4957e1,  1.4505e1,  1.7831e1,  1.8761e1,  
      1.7799e1,  1.6823e1,  1.8052e1,  1.8338e1,  1.7997e1, 
      1.7357e1,  1.7123e1,  1.7620e1,  1.8659e1,  2.0588e1,  
      1.9736e1,  1.9288e1,  1.9591e1,  2.1559e1,  2.1132e1,  
      2.1123e1,  1.9097e1,  1.8553e1,  1.8749e1,  2.0197e1,  
      2.1540e1,  2.0886e1,  2.0759e1,  2.2307e1,  2.5008e1,  
      2.4997e1,  2.2875e1,  2.0214e1,  2.0390e1,  2.1836e1,  
      2.1411e1,  2.1714e1,  2.4951e1,  2.3784e1,  2.6073e1,  
      2.5752e1,  2.6687e1,  2.4134e1,  2.3489e1,  2.2535e1,  
      2.1553e1,  2.1857e1,  2.0776e1,  2.0960e1,  2.2831e1,  
      2.2926e1,  2.6881e1,  2.8660e1,  2.7705e1,  2.9691e1,  
      2.9685e1,  3.1146e1,  3.2507e1,  3.8706e1,  4.5216e1,  
      3.6583e1,  2.9212e1,  2.2882e1,  2.0652e1,  2.2422e1,
        
      2.5565e1,  2.5766e1,  2.2590e1,  2.2789e1,  2.3721e1,  
      2.8621e1,  2.9654e1,  3.2055e1,  3.2776e1,  4.3281e1,  
      5.8097e1,  4.7248e1,  4.3140e1,  2.8504e1,  2.7657e1,  
      2.7331e1,  2.8896e1,  3.1939e1,  3.8761e1,  3.5808e1,  
      2.7695e1,  2.6745e1,  2.6210e1,  2.6832e1,  2.7136e1,  
      3.0371e1,  3.0354e1,  3.1392e1,  3.4751e1,  3.6525e1,  
      4.0196e1,  5.0180e1,  6.1001e1,  4.9101e1,  4.7832e1,  
      3.9201e1,  2.9197e1,  2.7610e1,  2.8964e1,  3.6943e1,  
      4.4608e1,  3.8074e1,  3.3759e1,  3.0061e1,  3.0265e1,  
      2.8362e1,  2.6355e1,  2.8443e1,  2.8013e1,  2.9159e1,  
      3.0315e1,  3.0726e1,  3.5135e1,  4.4902e1,  4.7622e1,  
      6.6750e1,  5.8742e1,  5.3361e1,  5.8814e1,  7.3735e1,  
      8.6971e1,  6.6541e1,  5.2115e1,  4.3165e1,  3.9049e1,  
      4.3037e1,  4.7134e1,  4.6283e1,  4.9635e1,  4.3507e1,  
      4.7588e1,  4.5471e1,  4.6414e1,  5.1351e1,  4.5131e1,  
      3.4285e1,  3.2107e1,  3.2069e1,  3.4440e1,  3.7501e1,  
      3.7824e1,  2.9555e1,  2.5413e1,  2.2986e1,  2.2596e1,  
      2.6306e1,  3.0040e1,  3.5798e1,  4.2928e1,  4.9089e1, 
      5.9371e1,  7.6168e1,  6.3801e1,  5.4179e1,  5.4850e1,  
      6.4091e1,  8.1573e1,  1.1450e2,  1.7968e2,  2.6407e2,
        
      3.4813e2,  2.7329e2,  1.0788e2,  5.0215e1,  3.1675e1,  
      2.2733e1,  1.8601e1,  1.6866e1,  1.4391e1,  1.6738e1,  
      1.9778e1,  2.8318e1,  2.8973e1,  3.3409e1,  4.5397e1,  
      6.0122e1,  2.1669e1,  1.9249e1,  2.0934e1,  2.1570e1,  
      3.0111e1,  2.9403e1,  3.2132e1,  3.0744e1,  1.7327e1, 
      1.3868e1,  1.3789e1,  1.5830e1,  1.7494e1,  2.4997e1,  
      2.6351e1,  2.4616e1,  3.0078e1,  3.9664e1,  6.4691e1,  
      2.8642e1,  2.1771e1,  1.8671e1,  2.0703e1,  1.7940e1,  
      1.5852e1,  1.6520e1,  2.0622e1,  2.6785e1,  1.8193e1,  
      1.4725e1,  1.3963e1,  1.3232e1,  1.4249e1,  1.6570e1,  
      1.8958e1,  1.8943e1,  2.2009e1,  2.2339e1,  2.1287e1,  
      2.8121e1,  4.8335e1,  3.2526e1,  3.4578e1,  6.3379e1,  
      2.8000e1,  2.5582e1,  2.1106e1,  2.3836e1,  3.3430e1,  
      5.1600e1,  2.9972e1,  2.3098e1,  2.1025e1,  1.5520e1,  
      1.5848e1,  1.8576e1,  1.7182e1,  1.9536e1,  1.5064e1,  
      1.5033e1,  1.8089e1,  1.8039e1,  1.9046e1,  2.3480e1,  
      2.2089e1,  2.4813e1,  3.3380e1,  4.2629e1,  3.4037e1,  
      2.3393e1,  1.8912e1,  2.0944e1,  2.8103e1,  2.6374e1,  
      3.2192e1,  4.4533e1,  6.4763e1,  4.4161e1,  3.6258e1,  
      3.8989e1,  4.2397e1,  5.3707e1,  6.9825e1,  8.4571e1,  
      
      8.9357e1,  8.3170e1,  6.6336e1,  6.3925e1,  4.5725e1,  
      4.0224e1,  4.3980e1,  3.4085e1,  2.7239e1,  2.8480e1,  
      2.0656e1,  2.3869e1,  2.0471e1,  2.8110e1,  1.8336e1,  
      1.8108e1,  2.1561e1,  2.1819e1,  2.5272e1,  2.5536e1,  
      2.4318e1,  2.6048e1,  3.8321e1,  5.4762e1,  2.3884e1,  
      1.9494e1,  2.1468e1,  2.2960e1,  3.0086e1,  2.7647e1,  
      4.1665e1,  3.9464e1,  2.8484e1,  2.7508e1,  2.8498e1,  
      3.0218e1,  2.7534e1,  3.1224e1,  4.2523e1,  3.9344e1,  
      2.9793e1,  2.6616e1,  2.9335e1,  3.0578e1,  3.7959e1,  
      3.9438e1,  5.8593e1,  3.5569e1,  3.1418e1,  2.5553e1,  
      2.7285e1,  2.6083e1,  2.4375e1,  2.6591e1,  4.0341e1, 
      4.3538e1,  2.0506e1,  1.8324e1,  2.0799e1,  2.2284e1,  
      1.8869e1,  1.9122e1,  2.4529e1,  2.7232e1,  2.8963e1,  
      1.5987e1,  1.6496e1,  2.0446e1,  1.9235e1,  1.7530e1, 
      1.8759e1,  1.9751e1,  2.3442e1,  1.7330e1,  1.9061e1,  
      1.8845e1,  2.0095e1,  2.2070e1,  2.2818e1,  2.5528e1,  
      3.0196e1,  2.3354e1,  2.7291e1,  3.1958e1,  3.2461e1,  
      4.2784e1,  5.2359e1,  5.8993e1,  7.7159e1,  5.1195e1,  
      3.2587e1,  3.2597e1,  2.5512e1,  2.1842e1,  2.2345e1,  
      2.8005e1,  1.9933e1,  1.8231e1,  1.8487e1,  2.0951e1,
        
      2.2445e1,  2.0497e1,  2.2718e1,  3.2294e1,  3.3773e1, 
      1.7530e1,  1.8759e1,  1.9751e1,  2.3442e1,  1.7330e1,  
      1.9061e1,  1.8845e1,  2.0095e1,  2.2070e1,  2.2818e1,  
      2.5528e1,  3.0196e1,  2.3354e1,  2.7291e1,  3.1958e1,  
      3.2461e1,  4.2784e1,  5.2359e1,  5.8993e1,  7.7159e1,  
      5.1195e1,  3.2587e1,  3.2597e1,  2.5512e1,  2.1842e1,  
      2.2345e1,  2.8005e1,  1.9933e1,  1.8231e1,  1.8487e1,  
      2.0951e1,  2.2445e1,  2.0497e1,  2.2718e1,  3.2294e1,  
      3.3773e1,  6.2859e1,  2.8297e1,  2.1696e1,  2.1964e1,  
      2.0260e1,  2.1252e1,  2.1752e1,  2.3238e1,  2.0067e1,  
      2.1080e1,  2.4547e1,  2.9712e1,  3.7820e1,  4.3466e1,  
      4.6420e1,  4.1772e1,  3.0259e1,  2.5620e1,  2.5630e1,  
      2.7357e1,  2.8352e1,  3.2043e1,  8.0364e1,  2.5950e1,  
      2.4494e1,  2.2300e1,  2.0856e1,  2.2096e1,  2.4572e1,  
      2.6791e1,  3.4406e1,  4.0786e1,  4.4722e1,  4.1543e1,  
      3.4196e1,  3.2245e1,  3.3234e1,  4.0111e1,  4.5761e1,  
      6.0730e1,  2.7643e1,  2.3724e1,  2.0558e1,  2.2051e1,  
      2.4273e1,  3.1148e1,  3.6059e1,  4.0241e1,  2.8000e1,  
      3.0215e1,  3.2433e1,  5.0586e1,  2.2654e1,  2.3415e1,  
      3.0542e1,  4.0609e1,  3.3025e1,  3.3277e1,  4.6282e1,
        
      2.5208e1,  2.2763e1,  2.9649e1,  3.4073e1,  4.3400e1,
      3.4340e1,  4.1214e1,  2.4559e1,  3.2670e1,  3.7092e1,  
      3.3913e1,  3.3923e1,  2.6331e1,  3.2479e1,  3.5918e1,  
      3.4702e1,  2.9567e1,  3.6201e1,  3.2536e1,  3.2662e1,  
      3.3942e1,  3.3987e1,  3.6718e1,  3.3283e1,  3.2516e1,  
      3.2873e1,  3.2779e1,  3.4525e1,  3.3712e1,  3.5600e1,  
      3.2992e1,  3.2647e1,  3.2928e1,  3.4830e1,  3.4906e1,  
      3.5967e1,  3.3796e1,  3.6040e1,  3.5633e1,  3.4680e1,  
      3.7785e1,  3.7127e1,  3.7938e1,  3.8110e1,  3.9372e1,  
      3.8029e1,  3.8433e1,  3.6841e1,  3.4029e1,  3.2685e1, 
      3.2386e1,  3.2069e1,  3.0691e1,  2.9925e1,  2.9800e1,  
      2.8018e1,  2.8173e1,  3.0215e1,  3.0386e1,  3.2069e1,  
      3.2255e1,  3.2583e1,  3.2847e1,  3.3204e1,  3.3265e1,  
      3.3669e1,  3.3448e1,  3.3446e1,  3.3291e1,  3.3460e1,  
      3.3410e1,  3.3752e1,  3.3501e1,  3.3419e1,  3.3181e1, 
      3.3008e1,  3.3304e1,  3.3020e1,  3.3457e1,  3.2987e1,  
      3.3391e1,  3.3530e1,  3.3748e1,  3.3919e1,  3.3715e1, 
      3.4119e1,  3.4132e1,  3.3740e1,  3.4098e1,  3.4439e1,  
      3.4391e1,  3.4609e1,  3.4436e1,  3.4607e1,  3.4825e1,  
      3.3604e1,  3.3229e1,  3.3477e1,  3.3751e1,  3.4352e1,
        
      3.4679e1,  3.4569e1,  3.4988e1,  3.4909e1,  3.5781e1,  
      3.9134e1,  3.3215e1,  3.3010e1,  3.2477e1,  2.9759e1,  
      3.2269e1,  3.3422e1,  3.3763e1,  3.3839e1,  3.4118e1,  
      3.4362e1,  3.4206e1,  3.4767e1,  3.4906e1,  3.5139e1,  
      3.5372e1,  3.5698e1,  3.6898e1,  3.4320e1,  3.3305e1,  
      3.3803e1,  3.4223e1,  3.4346e1,  3.4468e1,  3.5261e1,  
      3.5822e1,  3.8208e1,  3.3211e1,  3.2008e1,  3.0445e1,  
      3.2629e1,  3.3643e1,  3.4358e1,  3.4545e1,  3.4762e1,  
      3.4932e1,  3.5039e1,  3.5755e1,  3.5598e1,  3.3661e1,  
      3.3832e1,  3.4050e1,  3.4251e1,  3.4686e1,  3.4888e1,  
      3.7102e1,  3.1387e1,  3.3165e1,  3.4117e1,  3.4506e1,  
      3.4583e1,  3.5237e1,  3.5735e1,  3.4546e1,  3.4608e1,  
      3.4996e1,  3.6337e1,  3.1793e1,  3.4553e1,  3.5177e1,  
      3.5831e1,  3.5408e1,  3.4923e1,  3.4564e1,  3.6061e1,  
      3.2953e1,  3.6072e1,  3.5228e1,  3.4898e1,  3.5381e1,  
      3.4334e1,  3.3273e1,  3.4396e1,  3.4956e1,  3.4720e1,  
      3.4439e1,  3.3938e1,  3.4671e1,  3.5043e1,  3.4278e1,  
      3.4994e1,  3.4228e1,  3.4991e1,  3.4474e1,  3.5082e1,  
      3.4831e1,  3.4829e1,  3.5000e1,  3.4748e1,  3.4935e1,  
      3.5121e1,  3.4900e1,  3.5212e1,  3.4788e1,  3.4708e1,
        
      3.4380e1,  3.4644e1,  3.4721e1,  3.5094e1,  3.4873e1,  
      3.5044e1,  3.5121e1,  3.5026e1,  3.5023e1,  3.5442e1,  
      3.4909e1,  3.4939e1,  3.5170e1,  3.5058e1,  3.5307e1,  
      3.5429e1,  3.5271e1,  3.5131e1,  3.5207e1,  3.5266e1,  
      3.5468e1,  3.5295e1,  3.5170e1,  3.5465e1,  3.5152e1,  
      3.5308e1,  3.5462e1,  3.5303e1,  3.5270e1,  3.5410e1, 
      3.5299e1,  3.5501e1,  3.5344e1,  3.5467e1,  3.5466e1,  
      3.5544e1,  3.5371e1,  3.5432e1,  3.5413e1,  3.5208e1,  
      3.5472e1,  3.5469e1,  3.5592e1,  3.5494e1,  3.5616e1,  
      3.5709e1,  3.5692e1,  3.5534e1,  3.5625e1,  3.5606e1,  
      3.5695e1,  3.5756e1,  3.5907e1,  3.5763e1,  3.5949e1,  
      3.6191e1,  3.6527e1,  3.6718e1,  3.6835e1,  3.6766e1,  
      3.6808e1,  3.6551e1,  3.6448e1,  3.5802e1,  3.5369e1,
      3.4774e1,  3.4137e1,  3.3475e1,  3.2583e1,  3.1921e1,  
      3.1590e1,  3.0961e1,  3.0553e1,  3.0280e1,  3.0091e1,  
      2.9903e1,  2.9996e1,  2.9918e1,  3.0145e1,  3.0421e1,  
      3.0251e1,  2.9826e1,  2.9385e1,  2.9171e1,  2.8874e1,  
      2.8653e1,  2.8711e1,  2.8575e1,  2.8651e1,  2.8377e1,  
      2.8123e1,  2.7910e1,  2.8035e1,  2.7974e1,  2.7803e1,  
      2.7311e1,  2.7158e1,  2.7478e1,  2.7468e1,  2.7069e1,  
      
      2.6542e1,  2.6389e1,  2.6601e1,  2.6278e1,  2.6098e1,  
      2.6165e1,  2.5834e1,  2.5504e1,  2.5986e1,  2.5393e1,  
      2.4404e1,  2.4324e1,  2.4053e1,  2.4018e1,  2.3543e1,  
      2.3169e1,  2.2050e1,  2.1980e1,  2.1330e1,  2.0138e1,  
      1.9736e1,  1.8710e1,  1.7774e1,  1.7188e1,  1.6509e1,  
      1.6092e1,  1.5639e1,  1.5287e1,  1.5027e1,  1.4982e1,  
      1.4584e1,  1.4550e1,  1.4208e1,  1.3968e1,  1.3637e1,  
      1.3304e1,  1.3304e1,  1.2592e1,  1.2326e1,  1.1842e1,  
      1.1426e1,  1.1079e1,  1.0592e1,  1.0070e1,  9.8707,    
      9.4744,    9.1585,    8.9229,    8.6291,    8.3000,    
      8.1328,    7.8260,    7.6232,    7.3619,    7.3330,    
      6.9313,    6.8787,    6.6611,    6.3447,    6.0507,    
      5.8142,    5.5418,    5.3038,    5.0295,    4.8488,    
      4.6202,    4.4264,    4.2438,    4.0606,    3.8530,    
      3.7162,    3.6875};  
       
    // Photoionization yield
    const int nYieldEntries = 11;
    const double xIon[nYieldEntries] = {
      12.65, 12.87, 13.02, 13.24, 13.88, 
      14.66, 15.01, 15.44, 15.67, 15.87, 
      16.22};
                 
    const double yIon[nYieldEntries] = {
      0.,     0.01226, 0.02900, 0.08853, 0.3693, 
      0.7024, 0.8190,  0.9262,  0.9715,  0.9883, 
      1.};
      
    // Locate the requested energy in the tables.
    // First the photoabsorption cross-section.
    int iLow = 0;
    int iUp = nPacsEntries - 1;
    int iM;
    while (iUp - iLow > 1) {
      iM = (iUp + iLow) >> 1;
      if (e >= xCO2[iM]) {
        iLow = iM;
      } else {
        iUp = iM;
      }
    }

    // Linear interpolation.
    cs = yCO2[iLow] + (e - xCO2[iLow]) * 
         (yCO2[iUp] - yCO2[iLow]) / (xCO2[iUp] - xCO2[iLow]);
    // Convert from Mbarn to cm2.
    cs *= 1.e-18;
    
    if (e < xIon[0]) {
      eta = 0.;
    } else if (e >= xIon[nYieldEntries - 1]) {
      eta = 1.;
    } else {
      // Linear interpolation.
      // Same procedure as for photoabsorption cross-section.
      iLow = 0;
      iUp = nYieldEntries - 1;
      while (iUp - iLow > 1) {
        iM = (iUp + iLow) >> 1;
        if (e >= xIon[iM]) {
          iLow = iM;
        } else {
          iUp = iM;
        }
      }
      eta = yIon[iLow] + (e - xIon[iLow]) * 
            (yIon[iUp] - yIon[iLow]) / (xIon[iUp] - xIon[iLow]);
    }
    
    return true;
    
  }
  
  if (e >= 290.06 && e <= 341.3) {
    // Carbon K edge
  
    const int nEntries = 46;
    
    const double xCO2[nEntries] = {
      2.8967e2, 2.9006e2, 2.9036e2, 2.9071e2, 2.9105e2, 
      2.9132e2, 2.9175e2, 2.9194e2, 2.9213e2, 2.9217e2, 
      2.9247e2, 2.9286e2, 2.9336e2, 2.9366e2, 2.9397e2, 
      2.9466e2, 2.9547e2, 2.9601e2, 2.9631e2, 2.9697e2, 
      2.9793e2, 2.9904e2, 3.0031e2, 3.0153e2, 3.0284e2, 
      3.0384e2, 3.0453e2, 3.0560e2, 3.0698e2, 3.0852e2, 
      3.1002e2, 3.1128e2, 3.1224e2, 3.1328e2, 3.1424e2, 
      3.1539e2, 3.1650e2, 3.1785e2, 3.1996e2, 3.2245e2, 
      3.2545e2, 3.2875e2, 3.3193e2, 3.3593e2, 3.3904e2, 
      3.4134e2};
        
    const double yCO2[nEntries] = {
      1.4893,    2.8017,    4.1009,    1.0011e1,  1.1982e1,
      1.0011e1,  4.1395,    2.7813,    1.4556,    1.1096,
      9.7879e-1, 1.0178,    1.2919,    1.0045,    8.9979e-1,
      8.3420e-1, 1.0755,    8.2710e-1, 8.2697e-1, 9.1158e-1,
      8.7852e-1, 9.9558e-1, 1.0146,    1.1904,    1.2225,
      1.4115,    1.4308,    1.3454,    1.3840,    1.5465,    
      1.7548,    1.9437,    2.0021,    1.9298,    1.9294,    
      1.8048,    1.6476,    1.5034,    1.3458,    1.2077,    
      1.0823,    9.7640e-1, 9.0974e-1, 8.6233e-1, 8.5447e-1, 
      8.4696e-1};
        
    // Linear interpolation.
    int iLow = 0;
    int iUp = nEntries - 1;
    int iM;
    while (iUp - iLow > 1) {
      iM = (iUp + iLow) >> 1;
      if (e >= xCO2[iM]) {
        iLow = iM;
      } else {
        iUp = iM;
      }
    }

    cs = yCO2[iLow] + (e - xCO2[iLow]) * 
         (yCO2[iUp] - yCO2[iLow]) / (xCO2[iUp] - xCO2[iLow]);
    // Convert from Mbarn to cm2.
    cs *= 1.e-18;
    eta = 1.;
    return true;
        
  }
  
  if (e >= 524.9 && e <= 572.8) {
    // Oxygen K edge
  
    const int nEntries = 44;
    
    const double xCO2[nEntries] = {
      5.2490e2,  5.2490e2,  5.2954e2,  5.3096e2,  5.3214e2,
      5.3282e2,  5.3319e2,  5.3373e2,  5.3448e2,  5.3503e2,
      5.3526e2,  5.3561e2,  5.3604e2,  5.3642e2,  5.3691e2,
      5.3717e2,  5.3743e2,  5.3774e2,  5.3812e2,  5.3851e2,
      5.3904e2,  5.3996e2,  5.4084e2,  5.4226e2,  5.4403e2,
      5.4568e2,  5.4725e2,  5.4855e2,  5.4920e2,  5.5054e2,
      5.5245e2,  5.5360e2,  5.5567e2,  5.5693e2,  5.5781e2,
      5.5835e2,  5.5938e2,  5.6007e2,  5.6080e2,  5.6292e2,
      5.6495e2,  5.6760e2,  5.7009e2,  5.7280e2};      
    
    const double yCO2[nEntries] = {
      3.0446e-1, 3.4889e-1, 3.7017e-1, 4.1350e-1, 5.2302e-1,
      7.3175e-1, 2.5744,    4.7866,    2.9776,    1.2349, 
      1.0929,    1.0079,    9.5595e-1, 9.8459e-1, 1.2643,
      1.4918,    1.5629,    1.5630,    1.5253,    1.5350,
      1.6016,    1.6494,    1.6072,    1.4753,    1.3815,
      1.3633,    1.4162,    1.3931,    1.4124,    1.5268,
      1.7456,    1.7982,    1.7992,    1.8709,    1.9045,
      1.8858,    1.8059,    1.7493,    1.6787,    1.5471,
      1.4581,    1.3978,    1.3659,    1.3389};

    // Linear interpolation.
    int iLow = 0;
    int iUp = nEntries - 1;
    int iM;
    while (iUp - iLow > 1) {
      iM = (iUp + iLow) >> 1;
      if (e >= xCO2[iM]) {
        iLow = iM;
      } else {
        iUp = iM;
      }
    }

    cs = yCO2[iLow] + (e - xCO2[iLow]) * 
         (yCO2[iUp] - yCO2[iLow]) / (xCO2[iUp] - xCO2[iLow]);
    // Convert from Mbarn to cm2.
    cs *= 1.e-18;
    eta = 1.;
    return true;
        
  }
  
  double a, b, c, d;
  if (e < 290) {
    a =    -20.1699;
    b =   1244.259;
    c = -11489.;
    d =  36074.58;
  } else if (e < 524.9) {
    a =      37.50509;
    b =    -429.43;
    c =   65138.77;
    d = -902421.;
  } else if (e < 2293.2) {
    a =       0.731716;
    b =   19329.84;
    c = -472016.;
    d = 4458877.;
  } else {
    a =        -4.33101;
    b =     19022.22;
    c =    161688.6;
    d = -71331572.;
  }
  
  const double y = ip / e;
  const double f = a * pow(y, 2) + b * pow(y, 3) + 
                   c * pow(y, 4) + d * pow(y, 5);
  // Conversion from oscillator strength to photoabsorption cs
  cs = 8.067283e-18 * f;
  eta = 1.;
  return true;

}

bool 
OpticalData::PhotoAbsorptionCsMethane(const double e, 
                                      double& cs, double& eta) {

  // Sources:
  // Photoabsorption cross-section:
  // J. Berkowitz, Atomic and Molecular Photoabsorption (2002)
  // N. Sakamoto et al., NIFS-DATA 109
  // Photoionization yield:
  // K. Kameta et al., J. El. Spectr. Rel. Phen. 123 (2002), 225-238

  
  if (e < 8.61) {
    cs = eta = 0.;
    return true;
  }
  
  if (e < 150.) {
    
    // Photoabsorption cross-section
    const int nPacsEntries = 134;
    
    const double xCH4[nPacsEntries] = {
      8.6100,    9.0000,    9.2130,    9.5000,    9.6900,
      1.0050e01, 1.0425e01, 1.0700e01, 1.0913e01, 1.1270e01,
      1.1500e01, 1.1713e01, 1.1900e01, 1.2125e01, 1.2375e01,
      1.2610e01, 1.3000e01, 1.3325e01, 1.3620e01, 1.4000e01,
      1.4500e01, 1.5000e01, 1.5500e01, 1.6000e01, 1.6500e01,
      1.7000e01, 1.7500e01, 1.8000e01, 1.8500e01, 1.9000e01,
      1.9500e01, 2.0000e01, 2.0500e01, 2.1000e01, 2.1500e01,
      2.2000e01, 2.2500e01, 2.3000e01, 2.3500e01, 2.4000e01,
      2.4500e01, 2.5000e01, 2.5500e01, 2.6000e01, 2.6500e01,
      2.7000e01, 2.7500e01, 2.8000e01, 2.8500e01, 2.9000e01,
      2.9500e01, 3.0000e01, 3.0500e01, 3.1000e01, 3.1500e01,
      3.2000e01, 3.2500e01, 3.3000e01, 3.3500e01, 3.4000e01,
      3.4500e01, 3.5000e01, 3.5500e01, 3.6000e01, 3.6500e01,
      3.7000e01, 3.7500e01, 3.8000e01, 3.8500e01, 3.9000e01,
      3.9500e01, 4.0000e01, 4.1000e01, 4.2000e01, 4.3000e01,
      4.4000e01, 4.5000e01, 4.6000e01, 4.7000e01, 4.8000e01,
      4.9000e01, 5.0000e01, 5.1000e01, 5.2000e01, 5.3000e01,
      5.4000e01, 5.5000e01, 5.6000e01, 5.7000e01, 5.8000e01, 
      5.9000e01, 6.0000e01, 6.1000e01, 6.2000e01, 6.3000e01,
      6.4000e01, 6.5000e01, 6.6000e01, 6.7000e01, 6.8000e01,
      6.9000e01, 7.0000e01, 7.1000e01, 7.2000e01, 7.3000e01, 
      7.4000e01, 7.5000e01, 7.6000e01, 7.7000e01, 7.8000e01, 
      7.9000e01, 8.0000e01, 8.2000e01, 8.4000e01, 8.6000e01, 
      8.8000e01, 9.0000e01, 9.2000e01, 9.4000e01, 9.6000e01, 
      9.8000e01, 1.0000e02, 1.0200e02, 1.0400e02, 1.0600e02, 
      1.0800e02, 1.1000e02, 1.1200e02, 1.1270e02, 1.1900e02, 
      1.2500e02, 1.3291e02, 1.4286e02, 1.5000e02};

    const double yCH4[nPacsEntries] = {
      0.,        3.9896,    9.2248,    1.6727e01, 1.8644e01,
      1.7399e01, 1.9316e01, 1.8119e01, 1.6679e01, 2.0792e01,
      2.8706e01, 3.0086e01, 2.9689e01, 3.1516e01, 3.3929e01,
      3.9598e01, 4.5208e01, 4.8369e01, 4.9053e01, 4.9090e01,
      4.8742e01, 4.8255e01, 4.7111e01, 4.5877e01, 4.4643e01,
      4.3260e01, 4.1429e01, 3.9947e01, 3.8415e01, 3.6982e01,
      3.5649e01, 3.4355e01, 3.2674e01, 3.1480e01, 3.0296e01,
      2.9152e01, 2.7719e01, 2.6535e01, 2.5441e01, 2.4306e01,
      2.3001e01, 2.1999e01, 2.1576e01, 2.0181e01, 1.9134e01,
      1.8481e01, 1.7642e01, 1.6825e01, 1.5854e01, 1.5364e01,
      1.4885e01, 1.4252e01, 1.3609e01, 1.3217e01, 1.2200e01,
      1.1381e01, 1.0879e01, 1.0716e01, 1.0269e01, 1.0040e01,
      9.5267,    9.0567,    8.8718,    8.4345,    8.1288,
      7.9107,    7.6596,    7.4084,    6.9486,    6.9827, 
      6.6434,    6.4139,    6.0315,    5.6927,    5.2109,
      4.9047,    4.6753,    4.3687,    4.1610,    3.9201, 
      3.8223,    3.5040,    3.3288,    3.1755,    3.0000, 
      2.8907,    2.6709,    2.4951,    2.4076,    2.3200, 
      2.1771,    2.0452,    2.0237,    1.9248,    1.8701, 
      1.7600,    1.6499,    1.6283,    1.5623,    1.4520,
      1.4303,    1.3975,    1.3868,    1.2652,    1.2101,
      1.1772,    1.1220,    1.0890,    1.0449,    1.0230,    
      9.8999e-1, 9.4580e-1, 9.0188e-1, 8.2448e-1, 7.8041e-1, 
      7.3630e-1, 6.9212e-1, 6.4789e-1, 6.2595e-1, 5.8161e-1, 
      5.5961e-1, 5.2637e-1, 5.1550e-1, 4.8219e-1, 4.7128e-1, 
      4.4913e-1, 4.2695e-1, 4.0474e-1, 3.8734e-1, 3.4841e-1, 
      3.0851e-1, 2.7834e-1, 2.3357e-1, 2.0263e-1};
    

    // Photoionization yield
    const int nYieldEntries = 11;
    const double xIon[nYieldEntries] = {
      12.65, 12.87, 13.02, 13.24, 13.88, 
      14.66, 15.01, 15.44, 15.67, 15.87, 
      16.22};
                 
    const double yIon[nYieldEntries] = {
      0.,     0.01226, 0.02900, 0.08853, 0.3693, 
      0.7024, 0.8190,  0.9262,  0.9715,  0.9883, 
      1.};
      
    // Locate the requested energy in the tables.
    // First the photoabsorption cross-section.
    int iLow = 0;
    int iUp = nPacsEntries - 1;
    int iM;
    while (iUp - iLow > 1) {
      iM = (iUp + iLow) >> 1;
      if (e >= xCH4[iM]) {
        iLow = iM;
      } else {
        iUp = iM;
      }
    }

    // Linear interpolation.
    cs = yCH4[iLow] + (e - xCH4[iLow]) * 
         (yCH4[iUp] - yCH4[iLow]) / (xCH4[iUp] - xCH4[iLow]);
    // Convert from Mbarn to cm2.
    cs *= 1.e-18;
    
    if (e < xIon[0]) {
      eta = 0.;
    } else if (e >= xIon[nYieldEntries - 1]) {
      eta = 1.;
    } else {
      // Linear interpolation.
      // Same procedure as for photoabsorption cross-section.
      iLow = 0;
      iUp = nYieldEntries - 1;
      while (iUp - iLow > 1) {
        iM = (iUp + iLow) >> 1;
        if (e >= xIon[iM]) {
          iLow = iM;
        } else {
          iUp = iM;
        }
      }
      eta = yIon[iLow] + (e - xIon[iLow]) * 
            (yIon[iUp] - yIon[iLow]) / (xIon[iUp] - xIon[iLow]);
    }
    
    return true;
    
  }
  
  if (e >= 285. && e <= 340.) {
    // Carbon K edge
  
    const int nEntries = 134;
    
    const double xCH4[nEntries] = {
      2.8500e02, 2.8591e02, 2.8640e02, 2.8671e02, 2.8695e02, 
      2.8701e02, 2.8704e02, 2.8708e02, 2.8712e02, 2.8716e02, 
      2.8725e02, 2.8734e02, 2.8739e02, 2.8759e02, 2.8768e02, 
      2.8776e02, 2.8781e02, 2.8786e02, 2.8790e02, 2.8793e02, 
      2.8795e02, 2.8798e02, 2.8801e02, 2.8803e02, 2.8805e02, 
      2.8808e02, 2.8810e02, 2.8812e02, 2.8815e02, 2.8817e02, 
      2.8823e02, 2.8827e02, 2.8832e02, 2.8836e02, 2.8839e02, 
      2.8843e02, 2.8849e02, 2.8853e02, 2.8855e02, 2.8860e02, 
      2.8865e02, 2.8868e02, 2.8876e02, 2.8881e02, 2.8883e02, 
      2.8888e02, 2.8894e02, 2.8901e02, 2.8908e02, 2.8912e02, 
      2.8920e02, 2.8926e02, 2.8933e02, 2.8936e02, 2.8941e02, 
      2.8944e02, 2.8949e02, 2.8952e02, 2.8956e02, 2.8958e02, 
      2.8964e02, 2.8968e02, 2.8971e02, 2.8975e02, 2.8979e02, 
      2.8984e02, 2.8989e02, 2.8993e02, 2.8996e02, 2.9003e02,     
      2.9011e02, 2.9015e02, 2.9018e02, 2.9022e02, 2.9026e02,  
      2.9029e02, 2.9034e02, 2.9037e02, 2.9048e02, 2.9054e02,
      2.9063e02, 2.9071e02, 2.9076e02, 2.9085e02, 2.9103e02,
      2.9126e02, 2.9150e02, 2.9223e02, 2.9366e02, 2.9590e02, 
      2.9776e02, 3.0025e02, 3.0224e02, 3.0342e02, 3.0479e02,
      3.0628e02, 3.0821e02, 3.0908e02, 3.1120e02, 3.1275e02,
      3.1580e02, 3.1934e02, 3.2451e02, 3.2961e02, 3.3495e02, 
      3.4000e02};
     
    const double yCH4[nEntries] = {
      4.1692e-02, 8.4191e-02, 1.5756e-01, 3.8643e-01, 5.0083e-01, 
      1.0526,     1.2561,     1.0539,     7.0664e-01, 4.1755e-01, 
      3.3202e-01, 3.6272e-01, 4.7949e-01, 4.5392e-01, 5.7151e-01, 
      7.7579e-01, 1.1537,     1.8502,     3.1844,     6.1130,
      1.0201e01,  1.4028e01,  1.2318e01,  9.9124,     7.4197,
      5.5937,     4.4055,     4.1161,     4.4645,     4.5808,
      4.2918,     4.3506,     4.2065,     4.4100,     4.6715,
      3.9185,     2.6439,     2.1228,     2.0652,     2.3849,
      3.3134,     3.6909,     2.8225,     2.3885,     2.2150,
      1.7230,     1.2312,     1.0585,     1.2047,     1.3214,
      1.1487,     1.0338,     1.1799,     1.5574,     2.9208,
      3.4142,     2.5164,     1.7921,     1.5609,     1.7352,
      2.2580,     1.9689,     1.5056,     1.3613,     1.5649,
      2.0586,     2.0595,     2.4080,     2.5825,     1.9750,
      1.3964,     1.2813,     1.3977,     1.8333,     1.8629,     
      1.8054,     2.0963,     2.1838,     1.6639,     1.5200,    
      1.7824,     1.7258,     1.8138,     1.6993,     1.7025,     
      1.6774,     1.6526,     1.5320,     1.4318,     1.3409,     
      1.2958,     1.2874,     1.2789,     1.2609,     1.1881,     
      1.1245,     1.1068,     1.0796,     1.0711,     1.0258,     
      9.9013e-01, 9.4546e-01, 8.6468e-01, 8.0217e-01, 7.3974e-01,
      6.9461e-01};
    
    // Linear interpolation.
    int iLow = 0;
    int iUp = nEntries - 1;
    int iM;
    while (iUp - iLow > 1) {
      iM = (iUp + iLow) >> 1;
      if (e >= xCH4[iM]) {
        iLow = iM;
      } else {
        iUp = iM;
      }
    }

    cs = yCH4[iLow] + (e - xCH4[iLow]) * 
         (yCH4[iUp] - yCH4[iLow]) / (xCH4[iUp] - xCH4[iLow]);
    // Convert from Mbarn to cm2.
    cs *= 1.e-18;
    eta = 1.;
    return true;
        
  }
  
  double a, b, c, d;
  if (e < 285.) {
    a =    -4.03133;
    b =   261.0982;
    c = -3005.43;
    d = 11572.96;
  } else if (e < 1740.) {
    a =    -13.0225;
    b =   4303.263;
    c = -77622.4;
    d = 446724.9;
  } else {
    a =      -1.11677;
    b =    3478.699;
    c =  -48076.5;
    d = -364234.;
  }
  
  const double y = 12.61 / e;
  const double f = a * pow(y, 2) + b * pow(y, 3) + 
                   c * pow(y, 4) + d * pow(y, 5);
  // Conversion from oscillator strength to photoabsorption cs
  cs = 8.067283e-18 * f;
  eta = 1.;
  return true;
  
}

bool 
OpticalData::PhotoAbsorptionCsAcetylene(const double e, 
                                        double& cs, double& eta) {

  // Sources:

  // Photoabsorption cross-section:
  // J. Berkowitz, Atomic and Molecular Photoabsorption (2002)
  // N. Sakamoto et al., NIFS-DATA 109
  // Photoionization yield:
  // M. Ukai et al., J. Chem. Phys. 95 (1991), 4142-4153
  
  
  if (e < 62.) {
    
    // Photoabsorption cross-section
    const int nPacsEntries = 4;
    
    const double xC2H2[nPacsEntries] = {
      1.2500e02, 1.3291e02, 1.4286e02, 1.5000e02};

    const double yC2H2[nPacsEntries] = {
      3.0851e-1, 2.7834e-1, 2.3357e-1, 2.0263e-1};
    
    // Photoionization yield
    const int nYieldEntries = 40;
    double xIon[nYieldEntries] = {
      11.05, 11.06, 11.38, 11.56, 11.99, 12.56, 12.88, 13.23, 13.65, 13.82,
      14.13, 14.35, 14.49, 14.63, 14.84, 15.06, 15.23, 15.37, 15.48, 15.51,
      15.72, 15.83, 16.00, 16.21, 16.56, 16.67, 16.74, 16.95, 17.13, 17.27,
      17.41, 17.62, 17.87, 18.33, 18.68, 19.00, 19.35, 19.67, 19.98, 20.16
    };
                 
    double yIon[nYieldEntries] = {
      0.009, 0.153, 0.290, 0.486, 0.700, 0.794, 0.794, 0.780, 0.716, 0.678, 
      0.632, 0.662, 0.702, 0.750, 0.783, 0.826, 0.817, 0.814, 0.799, 0.789,
      0.796, 0.780, 0.769, 0.751, 0.766, 0.787, 0.812, 0.841, 0.883, 0.896,
      0.910, 0.924, 0.940, 0.940, 0.949, 0.967, 0.981, 0.988, 0.997, 1.
    };
    
      
    // Locate the requested energy in the tables.
    // First the photoabsorption cross-section.
    int iLow = 0;
    int iUp = nPacsEntries - 1;
    int iM;
    while (iUp - iLow > 1) {
      iM = (iUp + iLow) >> 1;
      if (e >= xC2H2[iM]) {
        iLow = iM;
      } else {
        iUp = iM;
      }
    }

    // Linear interpolation.
    cs = yC2H2[iLow] + (e - xC2H2[iLow]) * 
         (yC2H2[iUp] - yC2H2[iLow]) / (xC2H2[iUp] - xC2H2[iLow]);
    // Convert from Mbarn to cm2.
    cs *= 1.e-18;
    
    if (e < xIon[0]) {
      eta = 0.;
    } else if (e >= xIon[nYieldEntries - 1]) {
      eta = 1.;
    } else {
      // Linear interpolation.
      // Same procedure as for photoabsorption cross-section.
      iLow = 0;
      iUp = nYieldEntries - 1;
      while (iUp - iLow > 1) {
        iM = (iUp + iLow) >> 1;
        if (e >= xIon[iM]) {
          iLow = iM;
        } else {
          iUp = iM;
        }
      }
      eta = yIon[iLow] + (e - xIon[iLow]) * 
            (yIon[iUp] - yIon[iLow]) / (xIon[iUp] - xIon[iLow]);
    }
    
    return true;
    
  }
  
  eta = 1.;
  return true;

}

}

